/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelprototype;

import guimodels.LstGuiModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.AbstractListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import models.SeatsModel;
import models.TableModel;

/**
 *
 * @author Engineer
 */
public class Tables0 extends javax.swing.JFrame {

    ConnectionClass connectionClass;
    Connection connection;
    PreparedStatement pst;
    Statement statement;
    ResultSet rs;

    /**
     * Creates new form Tables0
     */
    public Tables0() {
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        connectionClass = new ConnectionClass();

        GetAllTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Broadway", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tables");

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        jButton1.setFont(new java.awt.Font("Broadway", 0, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Editing/insert_table-24.png"))); // NOI18N
        jButton1.setLabel("Add Table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Broadway", 0, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/fin/actions-edit.png"))); // NOI18N
        jButton2.setText("Edit TAble");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Broadway", 0, 14)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/fin/actions-delete.png"))); // NOI18N
        jButton3.setText("Delete Table");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Broadway", 0, 14)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Editing/delete-24.png"))); // NOI18N
        jButton4.setText("Delete Seat");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Broadway", 0, 14)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Editing/edit-24.png"))); // NOI18N
        jButton5.setText("Edit Seat");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Broadway", 0, 14)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/fin/add_new.png"))); // NOI18N
        jButton6.setText("Add Seat");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4, jButton5, jButton6});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4, jButton5, jButton6});

        jLabel2.setFont(new java.awt.Font("Broadway", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Seats");

        jList1.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Seat A", "Seat B", "Seat C", "Seat D", "Seat E", "Seat F", "Seat G", "Seat h", "Seat I", "Seat J", "Seat K", "Seat L", "Seat M", "Seat N", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.setPreferredSize(new java.awt.Dimension(66, 702));
        jScrollPane1.setViewportView(jList1);

        jList2.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Table 1", "Table 2", "Table 3", "Table 4", "Table 5", "Table 6", "Table 7", "Table 8", "Table 9", "Table 10", "Table 11", "Table 12", "Table 13", "Table 14", "Table 15", "Table 16", "Table 17", "Table 18", "Table 19", "Table 20", "Table 21", "Table 22", "Table 23", "Table 24", "Table 25", "Table 26", "Table 27" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList2.setCellRenderer(new LstGuiModel());
        jList2.setSelectionBackground(new java.awt.Color(0, 153, 102));
        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jScrollPane2)))
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        LstModel lm = (LstModel) jList2.getModel();
        TableModel tableModel = lm.getModel(jList2.getSelectedIndex());
        assert tableModel != null;
        DeleteTable(tableModel.getTableid());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        LstModel lm = (LstModel) jList2.getModel();
        TableModel tableModel = lm.getModel(jList2.getSelectedIndex());
        LstSeatsModel lsm = ((LstSeatsModel) jList1.getModel());
        SeatsModel seatsModel = lsm.getModel(jList1.getSelectedIndex());
        assert tableModel != null && lsm != null;
        DeleteSeat(tableModel.getTableid(), seatsModel.getSeatId());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        AddSit();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AddTb();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
        LstModel lm = (LstModel) jList2.getModel();
        TableModel tableModel = lm.getModel(jList2.getSelectedIndex());

        assert tableModel != null;
        GetSeats(tableModel.getTableid());
    }//GEN-LAST:event_jList2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(newSale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tables0().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void AddTb() {
        String tbname = JOptionPane.showInputDialog(Tables0.this, "Enter table name", "Add Table", JOptionPane.OK_CANCEL_OPTION);
        if (tbname != null && !tbname.isEmpty()) {
            AddTable(tbname);
        }
    }

    private void AddSit() {
        LstModel lm = (LstModel) jList2.getModel();
        TableModel tableModel = lm.getModel(jList2.getSelectedIndex());
        assert tableModel != null;

        String seatName = JOptionPane.showInputDialog(Tables0.this, "Enter seat name", "Add Seat", JOptionPane.OK_CANCEL_OPTION);
        if (seatName != null && !seatName.isEmpty()) {
            AddSeat(seatName, tableModel.getTableid());
        }
    }

    private void GetAllTables() {
        String sql = "SELECT * FROM tables ORDER BY tb_id DESC";
        connection = connectionClass.connectDb();
        assert connection != null;
        try {
            statement = connection.createStatement();
            rs = statement.executeQuery(sql);
            ArrayList<TableModel> arrayList = new ArrayList<>();
            while (rs.next()) {
                TableModel tableModel = new TableModel();
                tableModel.setTableid(rs.getInt("tb_id"));
                tableModel.setTableName(rs.getString("tb_name"));
                tableModel.setTableDate(rs.getString("tb_date"));
                arrayList.add(tableModel);
            }
            if (!arrayList.isEmpty()) {
                jList2.setModel(new LstModel(arrayList));
            } else {
                JOptionPane.showMessageDialog(null, "No tables available");
//                jList2.setModel(null);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

    }

    private void GetSeats(int tableid) {
        String sql = "SELECT * FROM tableseats WHERE seat_tableid='" + tableid + "'  ORDER BY seats_id DESC";
        connection = connectionClass.connectDb();
        assert connection != null;
        try {
            statement = connection.createStatement();
            rs = statement.executeQuery(sql);
            ArrayList<SeatsModel> arrayList = new ArrayList<>();
            while (rs.next()) {
                SeatsModel seatsModel = new SeatsModel();
                seatsModel.setSeatId(rs.getInt("seats_id"));
                seatsModel.setSeatName(rs.getString("seat_name"));
                seatsModel.setSeatTableId(rs.getInt("seat_tableid"));
                arrayList.add(seatsModel);
            }
            if (!arrayList.isEmpty()) {
                jList1.setModel(new LstSeatsModel(arrayList));
            } else {
                JOptionPane.showMessageDialog(null, "No Seats available");
//                jList1.setModel(null);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    private void AddTable(String tbname) {
        try {
            String sql = "INSERT INTO tables(tb_name) VALUES('" + tbname + "')";
            connection = connectionClass.connectDb();
            assert connection != null;
            pst = connection.prepareStatement(sql);

            if (pst.executeUpdate() != -1) {
                JOptionPane.showMessageDialog(null, "Table Added");

                new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        GetAllTables();
                        return null;
                    }
                }.run();

                AddTb();
            } else {
                JOptionPane.showMessageDialog(null, "Failed,try again");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

    }

    private void AddSeat(String seatname, int tableid) {
        try {
            String sql = "INSERT INTO tableseats(seat_tableid,seat_name) VALUES('" + tableid + "','" + seatname + "')";
            connection = connectionClass.connectDb();
            assert connection != null;
            pst = connection.prepareStatement(sql);

            if (pst.executeUpdate() != -1) {
                JOptionPane.showMessageDialog(null, "Seat Added");

                new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        GetSeats(tableid);
                        return null;
                    }
                }.run();

                AddSit();
            } else {
                JOptionPane.showMessageDialog(null, "Failed,try again");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

    }

    private void DeleteSeat(int tableid, int seatid) {
        int x = JOptionPane.showConfirmDialog(Tables0.this, "Sure to delete?", "Delete seat", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            try {
                String sql = "DELETE FROM tableseats WHERE seats_id= '" + seatid + "'";
                connection = connectionClass.connectDb();
                assert connection != null;
                pst = connection.prepareStatement(sql);

                if (pst.executeUpdate() != -1) {
                    JOptionPane.showMessageDialog(null, "Seat deleted");

                    new SwingWorker<Void, Void>() {
                        @Override
                        protected Void doInBackground() throws Exception {
                            GetSeats(tableid);
                            return null;
                        }
                    }.run();
                } else {
                    JOptionPane.showMessageDialog(null, "Failed,try again");
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

        }
    }

    private void DeleteTable(int tableid) {
        int x = JOptionPane.showConfirmDialog(Tables0.this, "Sure to delete?", "Delete seat", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            try {
                String sql = "DELETE FROM tables WHERE tb_id= '" + tableid + "'", sql2;
                sql2 = "DELETE FROM tableseats WHERE seat_tableid='" + tableid + "'";
                connection = connectionClass.connectDb();
                assert connection != null;
                pst = connection.prepareStatement(sql);

                if (pst.executeUpdate() != -1) {
                    pst = connection.prepareStatement(sql2);
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Table deleted");

                    new SwingWorker<Void, Void>() {
                        @Override
                        protected Void doInBackground() throws Exception {
                            GetAllTables();
                            return null;
                        }
                    }.run();
                } else {
                    JOptionPane.showMessageDialog(null, "Failed,try again");
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

        }
    }

    class LstModel extends AbstractListModel<String> {

        ArrayList<TableModel> tableModels;

        public LstModel(ArrayList<TableModel> tableModels) {
            this.tableModels = tableModels;
        }

        @Override
        public int getSize() {
            return tableModels.size();
        }

        @Override
        public String getElementAt(int index) {
            return tableModels.get(index).getTableName();
        }

        private TableModel getModel(int index) {
            return tableModels.get(index);
        }

    }

    class LstSeatsModel extends AbstractListModel<String> {

        ArrayList<SeatsModel> seatsModels;

        public LstSeatsModel(ArrayList<SeatsModel> seatsModels) {
            this.seatsModels = seatsModels;
        }

        @Override
        public int getSize() {
            return seatsModels.size();
        }

        @Override
        public String getElementAt(int index) {
            return seatsModels.get(index).getSeatName();
        }

        private SeatsModel getModel(int index) {
            return seatsModels.get(index);
        }

    }

}
